/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "Nokia_5110.h"
#include "dwt_delay.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const unsigned char Pic1 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00,
0x20, 0x00, 0x10, 0x80, 0x08, 0xC8, 0x00, 0x40, 0x04, 0x60, 0xC0, 0x90, 0x12, 0x26, 0x60, 0xC0,
0x00, 0xF8, 0xC8, 0x09, 0x39, 0x63, 0x01, 0x79, 0x79, 0x00, 0x58, 0x69, 0x01, 0x01, 0x03, 0x41,
0x79, 0x18, 0xA8, 0x00, 0x00, 0x10, 0xC6, 0x72, 0x20, 0x00, 0x20, 0x84, 0xC0, 0x40, 0x48, 0x08,
0xC0, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x10, 0x08, 0x00, 0x00, 0x02, 0x01, 0x02,
0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0xE7, 0xE2, 0xF2, 0xF0, 0xF1,
0xF9, 0xF9, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFF, 0xFE, 0x7E, 0x7E, 0x7E, 0x3E, 0x3E, 0x7E,
0x7E, 0x7E, 0xFE, 0xFF, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF8, 0xF0, 0xF0, 0xF3, 0xE1,
0xE0, 0xC0, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00,
0x00, 0x08, 0x10, 0x00, 0x80, 0x00, 0x00, 0x00, 0xE0, 0x0C, 0x41, 0x00, 0x00, 0x00, 0x90, 0x90,
0x89, 0x89, 0x18, 0x08, 0x08, 0x06, 0x40, 0x08, 0xE0, 0xF8, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x01, 0x00, 0x00, 0x80,
0xC0, 0xF0, 0xF8, 0xC0, 0x80, 0x00, 0x01, 0x01, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xE0, 0x08, 0x40, 0x02, 0x00,
0x04, 0x08, 0x9D, 0xA0, 0xA0, 0xB0, 0x00, 0x00, 0x00, 0x41, 0x0C, 0xE0, 0x07, 0x30, 0xC2, 0x00,
0x00, 0x00, 0x04, 0x0C, 0x6C, 0x4D, 0x88, 0x80, 0x00, 0x00, 0x02, 0x10, 0x07, 0x1F, 0x3F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x83, 0x8B, 0x81, 0x01, 0x00, 0x00, 0x88, 0x88, 0x84,
0x84, 0x86, 0x87, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0x87, 0x86, 0x84, 0x8C, 0x88, 0x88, 0x00,
0xF0, 0x01, 0x81, 0x83, 0x83, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x07,
0x10, 0x02, 0x00, 0x80, 0x40, 0x44, 0x28, 0xA4, 0x24, 0x0C, 0x00, 0x00, 0x00, 0xC2, 0x30, 0x07,
0x00, 0x00, 0x00, 0x01, 0x02, 0x08, 0x10, 0x00, 0x20, 0x40, 0x82, 0x00, 0x04, 0x01, 0x02, 0x20,
0x30, 0x00, 0xC0, 0x00, 0x00, 0x45, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x8F, 0x1F, 0x9F, 0x1F, 0x7F,
0x3F, 0x3F, 0x3F, 0x3F, 0x37, 0xFB, 0x7F, 0x73, 0x7F, 0x73, 0x73, 0x7F, 0x73, 0x77, 0xFF, 0x33,
0x3F, 0x3F, 0x3F, 0x3F, 0x7F, 0x1F, 0x1F, 0x9F, 0x0F, 0x0F, 0x0F, 0x07, 0x57, 0x83, 0x15, 0x00,
0x40, 0x10, 0x20, 0x00, 0x14, 0x02, 0x0A, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x10, 0x08, 0x02,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x04, 0x00, 0x10, 0x00, 0x00, 0x20, 0x22, 0x01, 0x00,
0x46, 0x40, 0x40, 0x02, 0x08, 0x03, 0x0C, 0x00, 0x80, 0x8C, 0xC0, 0xC0, 0x9C, 0x80, 0x8C, 0x90,
0xD0, 0xCC, 0x80, 0x8E, 0x00, 0x04, 0x0A, 0x02, 0x0E, 0x40, 0x42, 0x44, 0x01, 0x02, 0x20, 0x20,
0x00, 0x00, 0x10, 0x00, 0x04, 0x08, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char Pic2 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x00, 0x00,
0xC0, 0x80, 0x00, 0x00, 0x00, 0x7C, 0x0C, 0x0C, 0x0C, 0xFC, 0xFC, 0x0C, 0x0C, 0x0C, 0x1C, 0x00,
0x00, 0xE0, 0x78, 0x0C, 0x04, 0x04, 0x04, 0x0C, 0x38, 0xF0, 0xC0, 0x00, 0x04, 0x0C, 0xFC, 0xFC,
0x0C, 0x0C, 0x0C, 0x38, 0xF8, 0xC0, 0x00, 0x04, 0x0C, 0xFC, 0xFC, 0x0C, 0x0C, 0x0C, 0x38, 0xF8,
0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1C, 0xFC, 0xFC, 0x0C, 0x0C, 0x0C, 0x0C, 0x70,
0x00, 0x70, 0x0C, 0x0C, 0x0C, 0xFC, 0xFC, 0x0C, 0x0C, 0x0C, 0x0C, 0x60, 0x00, 0x0C, 0xFC, 0xFC,
0x05, 0x00, 0x00, 0x00, 0x05, 0x05, 0xFC, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x18,
0x00, 0x00, 0xFF, 0xFF, 0x08, 0x08, 0x0C, 0x17, 0xF3, 0xE0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x08,
0x08, 0x14, 0x17, 0xF3, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x08,
0x08, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x20,
0x20, 0x3F, 0x3F, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x38, 0x30, 0x20, 0x20, 0x30,
0x1C, 0x0F, 0x03, 0x00, 0x20, 0x30, 0x3F, 0x3F, 0x30, 0x30, 0x30, 0x18, 0x1F, 0x07, 0x00, 0x20,
0x30, 0x3F, 0x3F, 0x30, 0x30, 0x30, 0x18, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
0x38, 0x3F, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3F, 0x3F, 0x30,
0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0x38, 0x30, 0x20, 0x30, 0x30, 0x1C, 0x03, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x50, 0x00, 0x00, 0x20, 0xC0, 0x20, 0x00, 0x00,
0x20, 0x00, 0x20, 0xC0, 0xE0, 0x20, 0x20, 0xE0, 0x00, 0x00, 0x00, 0x80, 0x20, 0xC0, 0x20, 0x00,
0x00, 0x10, 0x10, 0x20, 0x20, 0x00, 0x40, 0x20, 0xE0, 0x20, 0x00, 0x20, 0x20, 0x00, 0x00, 0x20,
0x20, 0x00, 0x00, 0xE0, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x20, 0xC0, 0xE0, 0x20, 0x80, 0x20, 0x20,
0x20, 0x00, 0x20, 0x60, 0xA0, 0x00, 0x00, 0x20, 0xC0, 0x20, 0x40, 0x60, 0xA0, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01,
0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01,
0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01,
0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
const unsigned char Pic3 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
0x00, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x70, 0x18, 0x8C, 0xC4,
0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x60, 0x30, 0x10, 0x10, 0x90,
0xD8, 0x70, 0x20, 0xA0, 0x60, 0xF0, 0x38, 0x1C, 0x42, 0x28, 0xE8, 0xA8, 0x60, 0xB4, 0xFC, 0x5C,
0x63, 0x52, 0x31, 0x25, 0x19, 0x18, 0x08, 0x04, 0x1A, 0x0F, 0x0D, 0x0A, 0x10, 0x10, 0x20, 0x60,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x7C, 0x36, 0x1A, 0x0F, 0x0F, 0x0D, 0x0D, 0x07,
0x03, 0x03, 0x01, 0x02, 0x06, 0x8C, 0xF8, 0x00, 0x18, 0xC0, 0x30, 0x3C, 0x4F, 0x43, 0x20, 0x30,
0x08, 0x04, 0x0E, 0x0F, 0x05, 0x02, 0x01, 0x0C, 0x07, 0x04, 0x02, 0x03, 0x02, 0x01, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40,
0x40, 0x20, 0x20, 0x10, 0x18, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x01, 0x00, 0x04, 0x04, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x04, 0x05, 0x05, 0x05,
0x04, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
const unsigned char Pic4 [] = {
0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0xFC, 0xFF, 0x7F, 0x1F, 0x0F, 0x03, 0x01, 0x80, 0xC0,
0xF0, 0xF8, 0x7C, 0x3E, 0x1F, 0x0F, 0x07, 0x83, 0xC1, 0xE1, 0xF0, 0x70, 0x38, 0x3C, 0x1C, 0x1E,
0x8E, 0x8F, 0xC7, 0xC7, 0xE3, 0x63, 0x63, 0x63, 0x63, 0x73, 0x71, 0x71, 0x73, 0x73, 0x63, 0x63,
0x63, 0x63, 0xE7, 0xC7, 0xC7, 0x8E, 0x8E, 0x1E, 0x1C, 0x38, 0x78, 0x70, 0xE0, 0xE1, 0xC3, 0x83,
0x07, 0x0F, 0x1F, 0x3E, 0xFC, 0xF8, 0xE0, 0xC0, 0x80, 0x01, 0x07, 0x0F, 0x1F, 0x7F, 0xFF, 0xFC,
0xF8, 0xE0, 0x80, 0x00, 0x00, 0xC0, 0xF8, 0xFE, 0xFF, 0xFF, 0x1F, 0x07, 0x00, 0x00, 0x80, 0xE0,
0xFC, 0xFF, 0x3F, 0x0F, 0x07, 0x01, 0xC0, 0xF0, 0xF8, 0x3E, 0x1F, 0x07, 0x83, 0xE1, 0xF0, 0x38,
0x1C, 0x8E, 0xC7, 0xC7, 0x63, 0x31, 0x19, 0x98, 0xCC, 0x4C, 0x64, 0x26, 0x26, 0x26, 0xA6, 0xA6,
0xA6, 0x26, 0x26, 0x66, 0x6C, 0x4C, 0xCC, 0x98, 0x39, 0x31, 0x63, 0xC7, 0xC6, 0x1E, 0x3C, 0x78,
0xF0, 0xC1, 0x83, 0x0F, 0x1F, 0x7E, 0xF8, 0xE0, 0xC0, 0x01, 0x07, 0x1F, 0x7F, 0xFE, 0xF8, 0xE0,
0x80, 0x00, 0x01, 0x07, 0x3F, 0xFF, 0xFF, 0xFE, 0xFC, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00,
0x00, 0xFC, 0xFF, 0xFF, 0x1F, 0x01, 0x00, 0x00, 0xF8, 0xFF, 0x7F, 0x07, 0x00, 0x80, 0xF8, 0xFF,
0x0F, 0x03, 0xE0, 0xF8, 0x1E, 0x07, 0xE1, 0x38, 0x8E, 0xE7, 0x33, 0xC9, 0x64, 0x92, 0x4B, 0xA9,
0xD5, 0x35, 0xE5, 0xE5, 0xE5, 0x35, 0xD5, 0xA9, 0x4A, 0x96, 0x64, 0x89, 0x33, 0xC6, 0x0C, 0x38,
0xE1, 0x07, 0x1E, 0xF8, 0xE0, 0x03, 0x1F, 0xFE, 0xF8, 0x80, 0x01, 0x0F, 0xFF, 0xFE, 0xF0, 0x00,
0x00, 0x03, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x01, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x1E, 0xFF, 0xFF, 0x80, 0x00,
0x00, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x7F, 0xFF, 0x00, 0x7F, 0xC0, 0x1E, 0xE1,
0x1E, 0xCC, 0x21, 0xA1, 0x4C, 0x00, 0xC0, 0xF6, 0xDE, 0x00, 0xC0, 0x52, 0xB3, 0x40, 0x9E, 0xE1,
0x0C, 0xE1, 0x3F, 0x00, 0xFF, 0x3E, 0x00, 0xF3, 0xFF, 0x00, 0x00, 0xF3, 0xFF, 0x7F, 0x00, 0x00,
0xE1, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF,
0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0xC0, 0x00, 0x00, 0x00, 0x0F, 0x7F, 0xFF, 0xFC, 0xE0, 0x00, 0x00,
0x07, 0x3F, 0xFF, 0xF8, 0xC0, 0x00, 0x07, 0x3F, 0x7C, 0xF0, 0xC1, 0x0F, 0x1E, 0x78, 0xE1, 0xC7,
0x9C, 0x39, 0x33, 0x64, 0xC9, 0x92, 0xB5, 0x25, 0x2A, 0x69, 0x69, 0x49, 0x69, 0x6B, 0x2A, 0xA5,
0x94, 0x9A, 0xC9, 0x64, 0x33, 0x19, 0x8C, 0xC7, 0xE1, 0x38, 0x1E, 0x87, 0xC1, 0xF0, 0x7C, 0x1F,
0x07, 0x80, 0xE0, 0xFC, 0xFF, 0x1F, 0x03, 0x00, 0x80, 0xF0, 0xFF, 0xFF, 0x7F, 0x07, 0x00, 0x00,
0x00, 0xE0, 0xFF, 0xFF, 0x00, 0x00, 0x07, 0x1F, 0x7F, 0xFF, 0xFE, 0xF8, 0xC0, 0x80, 0x00, 0x03,
0x0F, 0x3F, 0x7F, 0xFC, 0xF8, 0xE0, 0x80, 0x03, 0x07, 0x1F, 0x3E, 0x78, 0xF0, 0xE1, 0xC3, 0x87,
0x0E, 0x1C, 0x38, 0x39, 0x73, 0x63, 0xE6, 0xC6, 0xCC, 0x8C, 0x99, 0x99, 0x99, 0x9B, 0x9B, 0x9B,
0x9B, 0x9B, 0x99, 0x99, 0x89, 0x8C, 0xCC, 0xC6, 0xE6, 0x63, 0x71, 0x39, 0x38, 0x1C, 0x0E, 0x87,
0xC3, 0xE1, 0xF0, 0x78, 0x3E, 0x1F, 0x07, 0x03, 0xC0, 0xE0, 0xF8, 0xFC, 0x7F, 0x1F, 0x07, 0x01,
0x00, 0x80, 0xE0, 0xF8, 0xFE, 0xFF, 0x7F, 0x1F,
};	
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
	char Read_Keypad(void);
  NOKIA_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { 
		char key;
		key = Read_Keypad();
		
		if(key=='A'){
			
			NOKIA_Image(Pic1);
			HAL_Delay(500);
		
		}else if(key =='B'){
		
			NOKIA_Image(Pic2);
			HAL_Delay(500);
		}else if(key =='C'){
		
			NOKIA_Image(Pic3);
			HAL_Delay(500);
		}else if(key =='D'){
		
			NOKIA_Image(Pic4);
			HAL_Delay(500);
		}
		
		
    /* USER CODE END WHILE */
		

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA7 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB14 PB15 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
char Read_Keypad(void){
		
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
			
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){
				
				return '1';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)==0){
				
				return '4';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==0){
				
				return '7';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){
				
				return '*';
			}
		}
		
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
			
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){
				
				return '2';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)==0){
				
				return '5';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==0){
				
				return '8';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){
				
				return '0';
			}
		}
		
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
			
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){
				
				return '3';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)==0){
				
				return '6';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==0){
				
				return '9';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){
				
				return '#';
			}
		}
		
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
			
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)==0){
				
				return 'A';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7)==0){
				
				return 'B';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)==0){
				
				return 'C';
			}
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){	
			
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)==0){
				
				return 'D';
			}
		}
	



};
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
